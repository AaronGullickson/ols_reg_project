knitr::opts_chunk$set(echo = TRUE)
load("input/addhealthwweights.RData")
library(survey)
library(mice)
library(texreg)
library(ggplot2)
#this function will run a linear model based on an
#imputations object from the mice package and will
#also adjust for sample design issues at the same time.
lm_svy_mi <- function(formula, imputations) {
#setting up null objects allows us to easily add results
#later
b <- se <- R2 <- NULL
#now loop through our imputations and run the model
for(i in 1:imputations$m) {
#grab the complete dataset
imputation <- complete(imputations, i)
#create the design effect object
imputation.svy <- svydesign(ids=~cluster, weight=~sweight,
data=imputation)
#run the model
model <- svyglm(formula, design=imputation.svy)
#collect the results
b <- cbind(b, coef(model))
se <- cbind(se, summary(model)$coef[,2])
#We should get R squared too. Sadly, svyglm won't give
#it to us by default, but we can get it from some of the
#slots in the model output
SSR <- sum((model$residuals)^2)
SSY <- sum((model$y-mean(model$y))^2)
R2 <- c(R2,1-SSR/SSY)
}
#now pool the results
b.pool <- apply(b, 1, mean)
between.var <- apply(b, 1, var)
within.var <- apply(se^2, 1, mean)
se.pool <- sqrt(within.var+between.var+between.var/imputations$m)
t.pool <- b.pool/se.pool
pvalue.pool <- (1-pnorm(abs(t.pool)))*2
coefficients <- data.frame(b.pool, se.pool, t.pool, pvalue.pool)
#lets take the mean R2 value
r.squared <- mean(R2)
#we can also grap n and p from the last model since
#they should be the same across all iterations
n <- nobs(model)
p <- length(model$coefficients)-1
#go ahead and calculate BIC.null
bic.null <- n*log(1-r.squared)+p*log(n)
#return everything in a list
return(list(coef=coefficients,
n=n,
r.squared=r.squared,
bic.null=bic.null))
}
#This function can be used to convert the output from the
#lm_svy_mi function to output that texreg knows how to display
convertModel <- function(model) {
tr <- createTexreg(
coef.names = rownames(model$coef),
coef = model$coef$b.pool,
se = model$coef$se.pool,
pvalues = model$coef$pvalue.pool,
gof.names = c("R2","BIC (null)","N"),
gof = c(model$r.squared, model$bic.null, model$n),
gof.decimal = c(T,F,F)
)
}
imputations <- mice(addhealth, 5, printFlag=FALSE)
model1 <- lm_svy_mi(indegree~parentinc, imputations)
model2 <- lm_svy_mi(indegree~parentinc+nsports+pseudoGPA, imputations)
model3 <- lm_svy_mi(indegree~I(nsports/(2*sd(nsports)))+I(parentinc/(2*sd(parentinc)))+race, imputations)
screenreg(lapply(list(model1, model2, model3), convertModel),
#custom.coef.names = c("Intercept",
#                     "parental income (1000s)",
#                     "number of sports played",
#                     "pseudo-GPA",
#                     "member of honor society",
#                     "Male"),
caption="OLS regression models predicting number of friend nominations received",
caption.above = TRUE)
boxplot(indegree~nsports, data=addhealth, las=1,
col="skyblue", xlab="Number of sports played",
ylab="Number of friend nominations")
ggplot(addhealth, aes(x=factor(nsports), y=indegree))+
geom_boxplot()
ggplot(addhealth, aes(x=factor(nsports), y=indegree))+
geom_boxplot()+
labs(x="number of sports played",
y="number of friend nominations received")_
ggplot(addhealth, aes(x=factor(nsports), y=indegree))+
geom_boxplot()+
labs(x="number of sports played",
y="number of friend nominations received")+
theme_bw()
#These models are not the ones you want
model1 <- lm_svy_mi(nsports~parentinc, imputations)
#These models are not the ones you want
model1 <- lm_svy_mi(nsports~parentinc, imputations)
model3 <- lm_svy_mi(nsports~parentinc+pseudoGPA+race, imputations)
#change to screenreg for inline display
knitreg(lapply(list(model1, model2, model3), convertModel),
#custom.coef.names = c("Intercept",
#                     "parental income (1000s)",
#                     "number of sports played",
#                     "pseudo-GPA",
#                     "member of honor society",
#                     "Male"),
caption="OLS regression models predicting number of sports played",
caption.above = TRUE)
#change to screenreg for inline display
knitreg(lapply(list(model1, model2, model3), convertModel),
#custom.coef.names = c("Intercept",
#                     "parental income (1000s)",
#                     "number of sports played",
#                     "pseudo-GPA",
#                     "member of honor society",
#                     "Male"),
caption="OLS regression models predicting number of sports played",
caption.above = TRUE)
#change to screenreg for inline display
knitreg(lapply(list(model1, model2, model3), convertModel),
#custom.coef.names = c("Intercept",
#                     "parental income (1000s)",
#                     "number of sports played",
#                     "pseudo-GPA",
#                     "member of honor society",
#                     "Male"),
digits=3,
caption="OLS regression models predicting number of sports played",
caption.above = TRUE)
?micde
?mice
